// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package blog

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRequest.Unmarshal(m, b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return xxx_messageInfo_InfoRequest.Size(m)
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

type InfoResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Build                string   `protobuf:"bytes,3,opt,name=build,proto3" json:"build,omitempty"`
	BuiltAt              string   `protobuf:"bytes,4,opt,name=built_at,json=builtAt,proto3" json:"built_at,omitempty"`
	GitHash              string   `protobuf:"bytes,5,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoResponse.Unmarshal(m, b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
}
func (m *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(m, src)
}
func (m *InfoResponse) XXX_Size() int {
	return xxx_messageInfo_InfoResponse.Size(m)
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func (m *InfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *InfoResponse) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *InfoResponse) GetBuiltAt() string {
	if m != nil {
		return m.BuiltAt
	}
	return ""
}

func (m *InfoResponse) GetGitHash() string {
	if m != nil {
		return m.GitHash
	}
	return ""
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "blog.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "blog.InfoResponse")
}

func init() {
	proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626)
}

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x95, 0x92, 0x34, 0xed, 0x86, 0x44, 0x64, 0x5a, 0x2a, 0xc7, 0xe1, 0x50, 0x7c, 0x42,
	0x15, 0xf5, 0x0a, 0x38, 0x51, 0x71, 0x20, 0xa1, 0x28, 0x2d, 0x02, 0x51, 0x15, 0xf5, 0xc2, 0x25,
	0xda, 0x24, 0x5b, 0x67, 0x25, 0xc7, 0x6b, 0xbc, 0x9b, 0xa0, 0x0a, 0xe5, 0xc2, 0x89, 0x33, 0x3c,
	0x1a, 0xaf, 0xc0, 0x43, 0x70, 0x44, 0x3b, 0xeb, 0x38, 0x76, 0xc8, 0xc1, 0x27, 0xcf, 0xcc, 0xee,
	0x7c, 0x99, 0xf9, 0xf7, 0x0f, 0x69, 0x2a, 0x9e, 0x2c, 0xc4, 0x98, 0xfb, 0x71, 0x22, 0xb5, 0x84,
	0xea, 0x28, 0x94, 0x81, 0xfb, 0x28, 0x90, 0x32, 0x08, 0x39, 0x65, 0xb1, 0xa0, 0x2c, 0x8a, 0xa4,
	0x66, 0x5a, 0xc8, 0x48, 0xd9, 0x3b, 0xee, 0x53, 0xfc, 0x8c, 0x4f, 0x03, 0x1e, 0x9d, 0xaa, 0xaf,
	0x2c, 0x08, 0x78, 0x42, 0x65, 0x8c, 0x37, 0xb6, 0xdc, 0xee, 0xa6, 0x2c, 0xcc, 0x46, 0xf3, 0x5b,
	0xca, 0x67, 0xb1, 0xbe, 0x4b, 0x0f, 0x1b, 0x73, 0xc5, 0x93, 0xd5, 0xcd, 0x46, 0x2c, 0x95, 0x4e,
	0x13, 0xaf, 0x49, 0x1a, 0x97, 0xd1, 0xad, 0xbc, 0xe6, 0x5f, 0xe6, 0x5c, 0x69, 0xef, 0x47, 0x85,
	0xdc, 0xb7, 0xb9, 0x8a, 0x65, 0xa4, 0x38, 0x00, 0xa9, 0x46, 0x6c, 0xc6, 0x9d, 0xca, 0x71, 0xe5,
	0xc9, 0xfe, 0x35, 0xc6, 0xe0, 0x90, 0xfa, 0x82, 0x27, 0x4a, 0xc8, 0xc8, 0xd9, 0xc1, 0xf2, 0x2a,
	0x85, 0x43, 0x52, 0x1b, 0xcd, 0x45, 0x38, 0x71, 0xee, 0x61, 0xdd, 0x26, 0xd0, 0x21, 0x7b, 0x26,
	0xd0, 0x43, 0xa6, 0x9d, 0xaa, 0x6d, 0xc0, 0xbc, 0xa7, 0xcd, 0x51, 0x20, 0xf4, 0x70, 0xca, 0xd4,
	0xd4, 0xa9, 0xd9, 0xa3, 0x40, 0xe8, 0x0b, 0xa6, 0xa6, 0xcf, 0xff, 0xee, 0x92, 0x6a, 0x3f, 0x94,
	0x01, 0xbc, 0x22, 0x55, 0x33, 0x12, 0xb4, 0x7d, 0x23, 0x9a, 0x9f, 0x1b, 0xd7, 0x85, 0x7c, 0xc9,
	0x4e, 0xec, 0x35, 0xbf, 0xff, 0xfe, 0xf3, 0x6b, 0xa7, 0x0e, 0x35, 0x2a, 0x4c, 0x57, 0x9f, 0x90,
	0x37, 0x09, 0x67, 0x9a, 0xdf, 0x28, 0x9e, 0x00, 0xb1, 0x0d, 0x26, 0x5e, 0x35, 0x9b, 0x38, 0x6b,
	0x3e, 0xc4, 0xe6, 0x96, 0xb7, 0x4f, 0x17, 0xcf, 0x28, 0x8a, 0x76, 0x56, 0x39, 0x81, 0x0f, 0xa4,
	0x3e, 0xe0, 0x1a, 0x01, 0xed, 0x7c, 0x53, 0x61, 0x88, 0x02, 0xa7, 0x8b, 0x9c, 0x87, 0x70, 0x90,
	0x71, 0xe8, 0x37, 0xf3, 0xf1, 0xc5, 0x64, 0x09, 0xe7, 0x64, 0x2f, 0xc5, 0xa9, 0xb2, 0xbc, 0x36,
	0xf2, 0x1a, 0xb0, 0x9e, 0x0b, 0x06, 0x84, 0xdc, 0xc4, 0x93, 0xb2, 0x8b, 0x75, 0x10, 0x70, 0xe0,
	0xb6, 0x72, 0x03, 0x89, 0xc9, 0xd2, 0x6c, 0x77, 0x41, 0xc8, 0x39, 0x0f, 0xf9, 0x16, 0xd0, 0x91,
	0x6f, 0x4d, 0xe5, 0xaf, 0x4c, 0xe5, 0xbf, 0x35, 0xa6, 0xf2, 0x8e, 0x10, 0xf6, 0xe0, 0x64, 0x03,
	0x06, 0x9f, 0x49, 0x6b, 0xc0, 0xf5, 0x95, 0xb1, 0x57, 0xff, 0x2e, 0x2f, 0x97, 0x29, 0x6d, 0xac,
	0x67, 0x4b, 0xe9, 0x74, 0x8f, 0x11, 0xd8, 0x85, 0xce, 0x86, 0x5c, 0x43, 0x31, 0x59, 0x52, 0xb4,
	0xeb, 0xfa, 0x1d, 0x4d, 0xe3, 0x6a, 0x4a, 0x13, 0x6f, 0x05, 0x16, 0xde, 0x11, 0x01, 0x66, 0xd3,
	0x4c, 0xb2, 0x52, 0x8c, 0x82, 0x64, 0xc8, 0xc8, 0x24, 0xb3, 0x86, 0x40, 0x4a, 0xc9, 0x0d, 0x0b,
	0x86, 0x48, 0x61, 0xe6, 0x93, 0x33, 0x04, 0xea, 0x56, 0x96, 0x57, 0x30, 0x84, 0x55, 0x28, 0x7b,
	0xc7, 0xff, 0xb6, 0x2b, 0xf5, 0x8e, 0xeb, 0x0d, 0xfb, 0x1f, 0x7f, 0xf6, 0xde, 0xc3, 0x3b, 0xd2,
	0x34, 0x7f, 0x3f, 0x99, 0xb0, 0x19, 0x3b, 0xee, 0x5d, 0x5d, 0x7a, 0x2f, 0x49, 0xfd, 0xd3, 0x3c,
	0x8e, 0x65, 0xa2, 0xc1, 0x9d, 0x6a, 0x1d, 0xab, 0x33, 0x4a, 0x95, 0x2d, 0xf8, 0x53, 0xb3, 0x4a,
	0x28, 0xc7, 0x2c, 0x74, 0x21, 0xad, 0xbd, 0x5e, 0xd7, 0x46, 0xbb, 0xf8, 0xc3, 0x2f, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x25, 0x1e, 0xf9, 0x49, 0x06, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlogClient is the client API for Blog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlogClient interface {
	// Get service version and build info
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// Create a new user
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
	// Retrieve a user
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// Retrieve users
	GetUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// Update user information
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
	// Retrieve a user
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieve posts for a specific user
	GetPostsByUser(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	// Create a new post
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error)
	// Update a specific post
	UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error)
	// Retrieve a specific post
	GetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	// Retrieve a specific post
	GetPosts(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	// Retrieve a specific post
	DeletePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*empty.Empty, error)
}

type blogClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogClient(cc grpc.ClientConnInterface) BlogClient {
	return &blogClient{cc}
}

func (c *blogClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/blog.Blog/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPostsByUser(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/GetPostsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetPosts(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/blog.Blog/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeletePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/blog.Blog/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServer is the server API for Blog service.
type BlogServer interface {
	// Get service version and build info
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	// Create a new user
	CreateUser(context.Context, *User) (*UserResponse, error)
	// Retrieve a user
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
	// Retrieve users
	GetUsers(context.Context, *UserRequest) (*UserResponse, error)
	// Update user information
	UpdateUser(context.Context, *User) (*UserResponse, error)
	// Retrieve a user
	DeleteUser(context.Context, *User) (*empty.Empty, error)
	// Retrieve posts for a specific user
	GetPostsByUser(context.Context, *PostRequest) (*PostResponse, error)
	// Create a new post
	CreatePost(context.Context, *Post) (*PostResponse, error)
	// Update a specific post
	UpdatePost(context.Context, *Post) (*PostResponse, error)
	// Retrieve a specific post
	GetPost(context.Context, *PostRequest) (*PostResponse, error)
	// Retrieve a specific post
	GetPosts(context.Context, *PostRequest) (*PostResponse, error)
	// Retrieve a specific post
	DeletePost(context.Context, *Post) (*empty.Empty, error)
}

// UnimplementedBlogServer can be embedded to have forward compatible implementations.
type UnimplementedBlogServer struct {
}

func (*UnimplementedBlogServer) Info(ctx context.Context, req *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedBlogServer) CreateUser(ctx context.Context, req *User) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedBlogServer) GetUser(ctx context.Context, req *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedBlogServer) GetUsers(ctx context.Context, req *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedBlogServer) UpdateUser(ctx context.Context, req *User) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedBlogServer) DeleteUser(ctx context.Context, req *User) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedBlogServer) GetPostsByUser(ctx context.Context, req *PostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsByUser not implemented")
}
func (*UnimplementedBlogServer) CreatePost(ctx context.Context, req *Post) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (*UnimplementedBlogServer) UpdatePost(ctx context.Context, req *Post) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (*UnimplementedBlogServer) GetPost(ctx context.Context, req *PostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (*UnimplementedBlogServer) GetPosts(ctx context.Context, req *PostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (*UnimplementedBlogServer) DeletePost(ctx context.Context, req *Post) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}

func RegisterBlogServer(s *grpc.Server, srv BlogServer) {
	s.RegisterService(&_Blog_serviceDesc, srv)
}

func _Blog_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).GetUsers(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_GetPostsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).GetPostsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/GetPostsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).GetPostsByUser(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).UpdatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).GetPost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).GetPosts(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).DeletePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blog.Blog",
	HandlerType: (*BlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Blog_Info_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Blog_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Blog_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Blog_GetUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Blog_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Blog_DeleteUser_Handler,
		},
		{
			MethodName: "GetPostsByUser",
			Handler:    _Blog_GetPostsByUser_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Blog_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Blog_UpdatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _Blog_GetPost_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _Blog_GetPosts_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Blog_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
